# Reset animation to running
self.current_animation = 'running'# Update animation
self.update_animation()

# Draw character animation
if self.current_animation in self.animations and self.animations[self.current_animation]:
    # Get the current frame
    if self.current_animation == 'running':
        frame = self.animations['running'][self.animation_frame] if self.animations['running'] else None
    elif self.current_animation == 'jumping':
        frame = self.animations['jumping'][0] if self.animations['jumping'] else None
    else:  # idle
        frame = self.animations['idle'][0] if self.animations['idle'] else None
    
    if frame:
        # Scale the frame
        scaled_frame = pygame.transform.scale(
            frame, 
            (int(frame.get_width() * self.character_scale), 
             int(frame.get_height() * self.character_scale))
        )
        
        # Draw the character
        screen.blit(scaled_frame, (self.character_x, self.character_y))# Inside the check_answer method, when setting self.result = True:
        self.current_animation = 'jumping'  # Jump when correct
        
        # When setting self.result = False:
        self.current_animation = 'idle'  # Idle when wrongdef update_animation(self):
            # Update animation frame
            self.animation_timer += self.animation_speed
            if self.animation_timer >= 1:
                self.animation_timer = 0
                if self.current_animation == 'running' and self.animations['running']:
                    self.animation_frame = (self.animation_frame + 1) % len(self.animations['running'])
                elif self.current_animation == 'jumping':
                    # For jumping, we just use one frame
                    self.animation_frame = 0
                else:  # idle
                    self.animation_frame = 0# Load character animations
                    self.animations = {
                        'idle': [],
                        'running': [],
                        'jumping': []
                    }
                    
                    # Load idle animation
                    try:
                        idle_dir = os.path.join(ASSETS_DIR, "animations", "idle")
                        if os.path.exists(idle_dir):
                            idle_frame = pygame.image.load(os.path.join(idle_dir, "idleFrame1.png")).convert_alpha()
                            self.animations['idle'].append(idle_frame)
                    except Exception as e:
                        print(f"Error loading idle animation: {e}")
                    
                    # Load running animation
                    try:
                        running_dir = os.path.join(ASSETS_DIR, "animations", "running")
                        if os.path.exists(running_dir):
                            for i in range(1, 9):  # There are 8 running frames
                                try:
                                    frame = pygame.image.load(os.path.join(running_dir, f"runningFrame{i}.png")).convert_alpha()
                                    self.animations['running'].append(frame)
                                except:
                                    break
                    except Exception as e:
                        print(f"Error loading running animation: {e}")
                    
                    # Load jumping animation
                    try:
                        jumping_dir = os.path.join(ASSETS_DIR, "animations", "jumping")
                        if os.path.exists(jumping_dir):
                            jumping_frame = pygame.image.load(os.path.join(jumping_dir, "jumpingFrame1.png")).convert_alpha()
                            self.animations['jumping'].append(jumping_frame)
                    except Exception as e:
                        print(f"Error loading jumping animation: {e}")
                    
                    # Animation state
                    self.current_animation = 'running'
                    self.animation_frame = 0
                    self.animation_speed = 0.1  # Speed of animation (frames per update)
                    self.animation_timer = 0
                    self.character_x = 100  # Character position
                    self.character_y = HEIGHT - 150
                    self.character_scale = 2.0  # Scale factor for the character